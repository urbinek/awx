---
- name: Aktualizacja MikroTik RouterOS przez API
  hosts: all
  order: reverse_sorted
  connection: local
  gather_facts: false

  vars:
    mikrotik_api_auth_header: "Basic {{ ( mikrotik_user + ':' + mikrotik_password ) | b64encode }}"
    mikrotik_update_chanel: stable # development|long-term|stable|testing

  tasks:
    - name: Ustawienie kanału aktualizacji na '{{ mikrotik_update_chanel }}'
      ansible.builtin.uri:
        url: "https://{{ inventory_hostname }}/rest/system/package/update/set"
        method: POST
        headers:
          Content-Type: 'application/json'
          Authorization: "{{ mikrotik_api_auth_header }}"
        body:
          channel: "{{ mikrotik_update_chanel }}"
        body_format: json
        timeout: 60
        validate_certs: false
      retries: 3
      register: set_channel
      changed_when: false

    - name: Odświeżenie informacji o dostępnych aktualizacjach RouterOS
      ansible.builtin.uri:
        url: "https://{{ inventory_hostname }}/rest/system/package/update/check-for-updates"
        method: POST
        headers:
          Content-Type: 'application/json'
          Authorization: "{{ mikrotik_api_auth_header }}"
        body:
          without-paging: ""
        body_format: json
        timeout: 60
        validate_certs: false
      retries: 3
      register: check_for_updates
      changed_when: false

    - name: Pauza na pobranie informacji o aktualizacjach
      ansible.builtin.pause:
        minutes: 1

    - name: Pobranie statusu bieżącej instalacji
      ansible.builtin.uri:
        url: "https://{{ inventory_hostname }}/rest/system/package/update"
        method: GET
        headers:
          Content-Type: 'application/json'
          Authorization: "{{ mikrotik_api_auth_header }}"
        body_format: json
        timeout: 60
        validate_certs: false
      retries: 3
      register: get_status
      changed_when: false

    - name: Wyświetl status aktualizacji
      ansible.builtin.debug:
        msg: "Host {{ inventory_hostname }} - Status: {{ get_status.json.status }}"

    - name: Pobierz aktualizacje, jeśli są dostępne
      ansible.builtin.uri:
        url: "https://{{ inventory_hostname }}/rest/system/package/update/download"
        method: POST
        headers:
          Content-Type: 'application/json'
          Authorization: "{{ mikrotik_api_auth_header }}"
        timeout: 60
        validate_certs: false
      retries: 3
      register: install_result
      when: get_status.json.status == "New version is available"

    - name: Pauza na pobranie plików aktualizacji
      ansible.builtin.pause:
        minutes: 1
      when: install_result.changed

    # --- ZADANIE 3: Restart urządzenia ---
    - name: Zrestartuj urządzenie, aby zakończyć aktualizację
      ansible.builtin.uri:
        url: "https://{{ inventory_hostname }}/rest/system/reboot"
        method: POST
        headers:
          Content-Type: 'application/json'
          Authorization: "{{ mikrotik_api_auth_header }}"
        timeout: 60
        validate_certs: false
      retries: 3
      when: install_result.changed
      async: 45
      poll: 0   # "Fire and forget" - odpal i nie sprawdzaj statusu
      register: reboot_triggered

    - name: Oczekiwanie na ponowne uruchomienie hosta (port API)
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: 443
        state: started
        delay: 30
        timeout: 300
      when: reboot_triggered.changed
      delegate_to: localhost
