- name: Aktualizacja urządzeń MikroTik RouterOS (przez REST API v7)
  hosts: mikrotik_devices
  gather_facts: false

  connection: httpapi

  vars:
    # --- Ustawienia połączenia HTTPAPI (REST) ---
    ansible_httpapi_plugin: community.routeros.routeros_rest
    ansible_httpapi_use_ssl: yes
    ansible_httpapi_validate_certs: no
    ansible_command_timeout: 20

    # --- Dane logowania dla HTTPAPI ---
    # Muszą być zdefiniowane tutaj, a nie w module_defaults
    ansible_httpapi_user: "{{ mikrotik_user }}+cet512w"
    ansible_httpapi_pass: "{{ mikrotik_password }}"

  # Usuwamy 'module_defaults', ponieważ dotyczyły złego modułu
  # module_defaults:
  #   community.routeros.api:
  #     ...

  tasks:
    - name: Pobranie informacji o wersji (sprawdzenie połączenia)
      # Używamy modułu httpapi_command zamiast community.routeros.api
      ansible.netcommon.httpapi_command:
        # Ścieżkę podajemy w parametrze 'command'
        command: /system/resource
      register: current_version_check
      changed_when: false

    - name: Wyświetlenie obecnej wersji
      ansible.builtin.debug:
        # Wynik JSON jest teraz w kluczu '.json' (a nie '.result')
        # Ścieżka REST /system/resource zwraca obiekt, a nie listę
        msg: "Obecna wersja: {{ current_version_check.json.version }}"

    - name: Sprawdzenie, czy jest dostępna nowa wersja RouterOS
      ansible.netcommon.httpapi_command:
        command: /system/package/update/check-for-updates
        # Ta operacja wymaga metody POST
        method: post
      register: update_check
      # Wynik jest w .json, a nie .result[0]
      changed_when: update_check.json.status == "New version is available"

    - name: Wyświetlenie statusu aktualizacji
      ansible.builtin.debug:
        msg: "Status aktualizacji: {{ update_check.json.status }}"
